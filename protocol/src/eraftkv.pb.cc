// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: eraftkv.proto

#include "protocol/eraftkv.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_eraftkv_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Entry_eraftkv_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_eraftkv_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KvOpPair_eraftkv_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_eraftkv_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Server_eraftkv_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_eraftkv_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ShardGroup_eraftkv_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_eraftkv_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Slot_eraftkv_2eproto;
namespace eraftkv {
class RequestVoteReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestVoteReq> _instance;
} _RequestVoteReq_default_instance_;
class RequestVoteRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestVoteResp> _instance;
} _RequestVoteResp_default_instance_;
class EntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Entry> _instance;
} _Entry_default_instance_;
class AppendEntriesReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppendEntriesReq> _instance;
} _AppendEntriesReq_default_instance_;
class AppendEntriesRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppendEntriesResp> _instance;
} _AppendEntriesResp_default_instance_;
class SnapshotReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SnapshotReq> _instance;
} _SnapshotReq_default_instance_;
class SnapshotRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SnapshotResp> _instance;
} _SnapshotResp_default_instance_;
class SlotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Slot> _instance;
} _Slot_default_instance_;
class ServerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Server> _instance;
} _Server_default_instance_;
class ShardGroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShardGroup> _instance;
} _ShardGroup_default_instance_;
class ClusterConfigChangeReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClusterConfigChangeReq> _instance;
} _ClusterConfigChangeReq_default_instance_;
class ClusterConfigChangeRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClusterConfigChangeResp> _instance;
} _ClusterConfigChangeResp_default_instance_;
class KvOpPairDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KvOpPair> _instance;
} _KvOpPair_default_instance_;
class ClientOperationReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientOperationReq> _instance;
} _ClientOperationReq_default_instance_;
class ClientOperationRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientOperationResp> _instance;
} _ClientOperationResp_default_instance_;
class SSTFileIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSTFileId> _instance;
} _SSTFileId_default_instance_;
class SSTFileContentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSTFileContent> _instance;
} _SSTFileContent_default_instance_;
}  // namespace eraftkv
static void InitDefaultsscc_info_AppendEntriesReq_eraftkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::eraftkv::_AppendEntriesReq_default_instance_;
    new (ptr) ::eraftkv::AppendEntriesReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::eraftkv::AppendEntriesReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AppendEntriesReq_eraftkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AppendEntriesReq_eraftkv_2eproto}, {
      &scc_info_Entry_eraftkv_2eproto.base,}};

static void InitDefaultsscc_info_AppendEntriesResp_eraftkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::eraftkv::_AppendEntriesResp_default_instance_;
    new (ptr) ::eraftkv::AppendEntriesResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::eraftkv::AppendEntriesResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppendEntriesResp_eraftkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AppendEntriesResp_eraftkv_2eproto}, {}};

static void InitDefaultsscc_info_ClientOperationReq_eraftkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::eraftkv::_ClientOperationReq_default_instance_;
    new (ptr) ::eraftkv::ClientOperationReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::eraftkv::ClientOperationReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClientOperationReq_eraftkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ClientOperationReq_eraftkv_2eproto}, {
      &scc_info_KvOpPair_eraftkv_2eproto.base,}};

static void InitDefaultsscc_info_ClientOperationResp_eraftkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::eraftkv::_ClientOperationResp_default_instance_;
    new (ptr) ::eraftkv::ClientOperationResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::eraftkv::ClientOperationResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClientOperationResp_eraftkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ClientOperationResp_eraftkv_2eproto}, {
      &scc_info_KvOpPair_eraftkv_2eproto.base,}};

static void InitDefaultsscc_info_ClusterConfigChangeReq_eraftkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::eraftkv::_ClusterConfigChangeReq_default_instance_;
    new (ptr) ::eraftkv::ClusterConfigChangeReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::eraftkv::ClusterConfigChangeReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ClusterConfigChangeReq_eraftkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ClusterConfigChangeReq_eraftkv_2eproto}, {
      &scc_info_Server_eraftkv_2eproto.base,
      &scc_info_ShardGroup_eraftkv_2eproto.base,}};

static void InitDefaultsscc_info_ClusterConfigChangeResp_eraftkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::eraftkv::_ClusterConfigChangeResp_default_instance_;
    new (ptr) ::eraftkv::ClusterConfigChangeResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::eraftkv::ClusterConfigChangeResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClusterConfigChangeResp_eraftkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ClusterConfigChangeResp_eraftkv_2eproto}, {
      &scc_info_ShardGroup_eraftkv_2eproto.base,}};

static void InitDefaultsscc_info_Entry_eraftkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::eraftkv::_Entry_default_instance_;
    new (ptr) ::eraftkv::Entry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::eraftkv::Entry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Entry_eraftkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Entry_eraftkv_2eproto}, {}};

static void InitDefaultsscc_info_KvOpPair_eraftkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::eraftkv::_KvOpPair_default_instance_;
    new (ptr) ::eraftkv::KvOpPair();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::eraftkv::KvOpPair::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KvOpPair_eraftkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KvOpPair_eraftkv_2eproto}, {}};

static void InitDefaultsscc_info_RequestVoteReq_eraftkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::eraftkv::_RequestVoteReq_default_instance_;
    new (ptr) ::eraftkv::RequestVoteReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::eraftkv::RequestVoteReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestVoteReq_eraftkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RequestVoteReq_eraftkv_2eproto}, {}};

static void InitDefaultsscc_info_RequestVoteResp_eraftkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::eraftkv::_RequestVoteResp_default_instance_;
    new (ptr) ::eraftkv::RequestVoteResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::eraftkv::RequestVoteResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestVoteResp_eraftkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RequestVoteResp_eraftkv_2eproto}, {}};

static void InitDefaultsscc_info_SSTFileContent_eraftkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::eraftkv::_SSTFileContent_default_instance_;
    new (ptr) ::eraftkv::SSTFileContent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::eraftkv::SSTFileContent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SSTFileContent_eraftkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SSTFileContent_eraftkv_2eproto}, {}};

static void InitDefaultsscc_info_SSTFileId_eraftkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::eraftkv::_SSTFileId_default_instance_;
    new (ptr) ::eraftkv::SSTFileId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::eraftkv::SSTFileId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SSTFileId_eraftkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SSTFileId_eraftkv_2eproto}, {}};

static void InitDefaultsscc_info_Server_eraftkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::eraftkv::_Server_default_instance_;
    new (ptr) ::eraftkv::Server();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::eraftkv::Server::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Server_eraftkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Server_eraftkv_2eproto}, {}};

static void InitDefaultsscc_info_ShardGroup_eraftkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::eraftkv::_ShardGroup_default_instance_;
    new (ptr) ::eraftkv::ShardGroup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::eraftkv::ShardGroup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ShardGroup_eraftkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ShardGroup_eraftkv_2eproto}, {
      &scc_info_Slot_eraftkv_2eproto.base,
      &scc_info_Server_eraftkv_2eproto.base,}};

static void InitDefaultsscc_info_Slot_eraftkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::eraftkv::_Slot_default_instance_;
    new (ptr) ::eraftkv::Slot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::eraftkv::Slot::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Slot_eraftkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Slot_eraftkv_2eproto}, {}};

static void InitDefaultsscc_info_SnapshotReq_eraftkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::eraftkv::_SnapshotReq_default_instance_;
    new (ptr) ::eraftkv::SnapshotReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::eraftkv::SnapshotReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SnapshotReq_eraftkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SnapshotReq_eraftkv_2eproto}, {}};

static void InitDefaultsscc_info_SnapshotResp_eraftkv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::eraftkv::_SnapshotResp_default_instance_;
    new (ptr) ::eraftkv::SnapshotResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::eraftkv::SnapshotResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SnapshotResp_eraftkv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SnapshotResp_eraftkv_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_eraftkv_2eproto[17];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_eraftkv_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_eraftkv_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_eraftkv_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::eraftkv::RequestVoteReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::eraftkv::RequestVoteReq, prevote_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::RequestVoteReq, term_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::RequestVoteReq, candidtate_id_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::RequestVoteReq, last_log_idx_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::RequestVoteReq, last_log_term_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::eraftkv::RequestVoteResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::eraftkv::RequestVoteResp, prevote_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::RequestVoteResp, request_term_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::RequestVoteResp, term_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::RequestVoteResp, vote_granted_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::RequestVoteResp, leader_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::eraftkv::Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::eraftkv::Entry, term_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::Entry, id_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::Entry, e_type_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::Entry, data_size_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::Entry, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::eraftkv::AppendEntriesReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::eraftkv::AppendEntriesReq, leader_id_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::AppendEntriesReq, message_index_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::AppendEntriesReq, term_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::AppendEntriesReq, prev_log_index_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::AppendEntriesReq, prev_log_term_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::AppendEntriesReq, leader_commit_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::AppendEntriesReq, is_heartbeat_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::AppendEntriesReq, entries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::eraftkv::AppendEntriesResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::eraftkv::AppendEntriesResp, message_token_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::AppendEntriesResp, term_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::AppendEntriesResp, success_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::AppendEntriesResp, current_index_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::AppendEntriesResp, conflict_index_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::AppendEntriesResp, conflict_term_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::eraftkv::SnapshotReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::eraftkv::SnapshotReq, term_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::SnapshotReq, leader_id_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::SnapshotReq, message_index_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::SnapshotReq, last_included_index_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::SnapshotReq, last_included_term_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::SnapshotReq, offset_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::SnapshotReq, data_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::SnapshotReq, done_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::eraftkv::SnapshotResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::eraftkv::SnapshotResp, term_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::SnapshotResp, message_index_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::SnapshotResp, offset_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::SnapshotResp, success_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::SnapshotResp, is_last_chunk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::eraftkv::Slot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::eraftkv::Slot, id_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::Slot, slot_status_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::Slot, status_modify_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::eraftkv::Server, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::eraftkv::Server, id_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::Server, address_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::Server, server_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::eraftkv::ShardGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::eraftkv::ShardGroup, id_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::ShardGroup, slots_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::ShardGroup, servers_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::ShardGroup, leader_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::eraftkv::ClusterConfigChangeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::eraftkv::ClusterConfigChangeReq, change_type_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::ClusterConfigChangeReq, handle_server_type_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::ClusterConfigChangeReq, shard_id_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::ClusterConfigChangeReq, server_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::ClusterConfigChangeReq, config_version_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::ClusterConfigChangeReq, op_sign_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::ClusterConfigChangeReq, command_id_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::ClusterConfigChangeReq, client_id_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::ClusterConfigChangeReq, shard_group_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::eraftkv::ClusterConfigChangeResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::eraftkv::ClusterConfigChangeResp, success_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::ClusterConfigChangeResp, shard_group_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::ClusterConfigChangeResp, config_version_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::ClusterConfigChangeResp, error_code_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::ClusterConfigChangeResp, leader_addr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::eraftkv::KvOpPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::eraftkv::KvOpPair, op_type_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::KvOpPair, key_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::KvOpPair, value_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::KvOpPair, success_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::KvOpPair, op_sign_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::eraftkv::ClientOperationReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::eraftkv::ClientOperationReq, op_timestamp_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::ClientOperationReq, client_id_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::ClientOperationReq, command_id_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::ClientOperationReq, kvs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::eraftkv::ClientOperationResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::eraftkv::ClientOperationResp, ops_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::ClientOperationResp, error_code_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::ClientOperationResp, leader_addr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::eraftkv::SSTFileId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::eraftkv::SSTFileId, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::eraftkv::SSTFileContent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::eraftkv::SSTFileContent, id_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::SSTFileContent, name_),
  PROTOBUF_FIELD_OFFSET(::eraftkv::SSTFileContent, content_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::eraftkv::RequestVoteReq)},
  { 10, -1, sizeof(::eraftkv::RequestVoteResp)},
  { 20, -1, sizeof(::eraftkv::Entry)},
  { 30, -1, sizeof(::eraftkv::AppendEntriesReq)},
  { 43, -1, sizeof(::eraftkv::AppendEntriesResp)},
  { 54, -1, sizeof(::eraftkv::SnapshotReq)},
  { 67, -1, sizeof(::eraftkv::SnapshotResp)},
  { 77, -1, sizeof(::eraftkv::Slot)},
  { 85, -1, sizeof(::eraftkv::Server)},
  { 93, -1, sizeof(::eraftkv::ShardGroup)},
  { 102, -1, sizeof(::eraftkv::ClusterConfigChangeReq)},
  { 116, -1, sizeof(::eraftkv::ClusterConfigChangeResp)},
  { 126, -1, sizeof(::eraftkv::KvOpPair)},
  { 136, -1, sizeof(::eraftkv::ClientOperationReq)},
  { 145, -1, sizeof(::eraftkv::ClientOperationResp)},
  { 153, -1, sizeof(::eraftkv::SSTFileId)},
  { 159, -1, sizeof(::eraftkv::SSTFileContent)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::eraftkv::_RequestVoteReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::eraftkv::_RequestVoteResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::eraftkv::_Entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::eraftkv::_AppendEntriesReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::eraftkv::_AppendEntriesResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::eraftkv::_SnapshotReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::eraftkv::_SnapshotResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::eraftkv::_Slot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::eraftkv::_Server_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::eraftkv::_ShardGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::eraftkv::_ClusterConfigChangeReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::eraftkv::_ClusterConfigChangeResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::eraftkv::_KvOpPair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::eraftkv::_ClientOperationReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::eraftkv::_ClientOperationResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::eraftkv::_SSTFileId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::eraftkv::_SSTFileContent_default_instance_),
};

const char descriptor_table_protodef_eraftkv_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\reraftkv.proto\022\007eraftkv\"s\n\016RequestVoteR"
  "eq\022\017\n\007prevote\030\001 \001(\010\022\014\n\004term\030\002 \001(\003\022\025\n\rcan"
  "didtate_id\030\003 \001(\003\022\024\n\014last_log_idx\030\004 \001(\003\022\025"
  "\n\rlast_log_term\030\005 \001(\003\"o\n\017RequestVoteResp"
  "\022\017\n\007prevote\030\001 \001(\010\022\024\n\014request_term\030\002 \001(\003\022"
  "\014\n\004term\030\003 \001(\003\022\024\n\014vote_granted\030\004 \001(\010\022\021\n\tl"
  "eader_id\030\005 \001(\003\"f\n\005Entry\022\014\n\004term\030\001 \001(\003\022\n\n"
  "\002id\030\002 \001(\003\022\"\n\006e_type\030\003 \001(\0162\022.eraftkv.Entr"
  "yType\022\021\n\tdata_size\030\004 \001(\003\022\014\n\004data\030\005 \001(\014\"\307"
  "\001\n\020AppendEntriesReq\022\021\n\tleader_id\030\001 \001(\003\022\025"
  "\n\rmessage_index\030\002 \001(\003\022\014\n\004term\030\003 \001(\003\022\026\n\016p"
  "rev_log_index\030\004 \001(\003\022\025\n\rprev_log_term\030\005 \001"
  "(\003\022\025\n\rleader_commit\030\006 \001(\003\022\024\n\014is_heartbea"
  "t\030\007 \001(\010\022\037\n\007entries\030\010 \003(\0132\016.eraftkv.Entry"
  "\"\217\001\n\021AppendEntriesResp\022\025\n\rmessage_token\030"
  "\001 \001(\t\022\014\n\004term\030\002 \001(\003\022\017\n\007success\030\003 \001(\010\022\025\n\r"
  "current_index\030\004 \001(\003\022\026\n\016conflict_index\030\005 "
  "\001(\003\022\025\n\rconflict_term\030\006 \001(\003\"\252\001\n\013SnapshotR"
  "eq\022\014\n\004term\030\001 \001(\003\022\021\n\tleader_id\030\002 \001(\003\022\025\n\rm"
  "essage_index\030\003 \001(\t\022\033\n\023last_included_inde"
  "x\030\004 \001(\003\022\032\n\022last_included_term\030\005 \001(\003\022\016\n\006o"
  "ffset\030\006 \001(\003\022\014\n\004data\030\007 \001(\014\022\014\n\004done\030\010 \001(\010\""
  "k\n\014SnapshotResp\022\014\n\004term\030\001 \001(\003\022\025\n\rmessage"
  "_index\030\002 \001(\t\022\016\n\006offset\030\003 \001(\003\022\017\n\007success\030"
  "\004 \001(\010\022\025\n\ris_last_chunk\030\005 \001(\010\"X\n\004Slot\022\n\n\002"
  "id\030\001 \001(\003\022(\n\013slot_status\030\002 \001(\0162\023.eraftkv."
  "SlotStatus\022\032\n\022status_modify_time\030\003 \001(\003\"S"
  "\n\006Server\022\n\n\002id\030\001 \001(\003\022\017\n\007address\030\002 \001(\t\022,\n"
  "\rserver_status\030\003 \001(\0162\025.eraftkv.ServerSta"
  "tus\"k\n\nShardGroup\022\n\n\002id\030\001 \001(\003\022\034\n\005slots\030\002"
  " \003(\0132\r.eraftkv.Slot\022 \n\007servers\030\003 \003(\0132\017.e"
  "raftkv.Server\022\021\n\tleader_id\030\004 \001(\003\"\246\002\n\026Clu"
  "sterConfigChangeReq\022(\n\013change_type\030\001 \001(\016"
  "2\023.eraftkv.ChangeType\0225\n\022handle_server_t"
  "ype\030\002 \001(\0162\031.eraftkv.HandleServerType\022\020\n\010"
  "shard_id\030\003 \001(\003\022\037\n\006server\030\004 \001(\0132\017.eraftkv"
  ".Server\022\026\n\016config_version\030\005 \001(\003\022\017\n\007op_si"
  "gn\030\006 \001(\003\022\022\n\ncommand_id\030\007 \001(\003\022\021\n\tclient_i"
  "d\030\010 \001(\t\022(\n\013shard_group\030\t \001(\0132\023.eraftkv.S"
  "hardGroup\"\251\001\n\027ClusterConfigChangeResp\022\017\n"
  "\007success\030\001 \001(\010\022(\n\013shard_group\030\002 \003(\0132\023.er"
  "aftkv.ShardGroup\022\026\n\016config_version\030\003 \001(\003"
  "\022&\n\nerror_code\030\004 \001(\0162\022.eraftkv.ErrorCode"
  "\022\023\n\013leader_addr\030\005 \001(\003\"p\n\010KvOpPair\022&\n\007op_"
  "type\030\001 \001(\0162\025.eraftkv.ClientOpType\022\013\n\003key"
  "\030\002 \001(\t\022\r\n\005value\030\003 \001(\t\022\017\n\007success\030\004 \001(\010\022\017"
  "\n\007op_sign\030\005 \001(\003\"q\n\022ClientOperationReq\022\024\n"
  "\014op_timestamp\030\001 \001(\004\022\021\n\tclient_id\030\002 \001(\t\022\022"
  "\n\ncommand_id\030\003 \001(\003\022\036\n\003kvs\030\004 \003(\0132\021.eraftk"
  "v.KvOpPair\"r\n\023ClientOperationResp\022\036\n\003ops"
  "\030\001 \003(\0132\021.eraftkv.KvOpPair\022&\n\nerror_code\030"
  "\002 \001(\0162\022.eraftkv.ErrorCode\022\023\n\013leader_addr"
  "\030\003 \001(\003\"\027\n\tSSTFileId\022\n\n\002id\030\001 \001(\005\";\n\016SSTFi"
  "leContent\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\017\n\007c"
  "ontent\030\003 \001(\014*h\n\tErrorCode\022\033\n\027REQUEST_NOT"
  "_LEADER_NODE\020\000\022\020\n\014NODE_IS_DOWN\020\001\022\023\n\017REQU"
  "EST_TIMEOUT\020\002\022\027\n\023NODE_IS_SNAPSHOTING\020\003*1"
  "\n\tEntryType\022\n\n\006Normal\020\000\022\016\n\nConfChange\020\001\022"
  "\010\n\004NoOp\020\002*A\n\nSlotStatus\022\013\n\007Running\020\000\022\r\n\t"
  "Migrating\020\001\022\r\n\tImporting\020\002\022\010\n\004Init\020\003* \n\014"
  "ServerStatus\022\006\n\002Up\020\000\022\010\n\004Down\020\001*\216\001\n\nChang"
  "eType\022\017\n\013ClusterInit\020\000\022\r\n\tShardJoin\020\001\022\016\n"
  "\nShardLeave\020\002\022\017\n\013ShardsQuery\020\003\022\014\n\010SlotMo"
  "ve\020\004\022\016\n\nServerJoin\020\005\022\017\n\013ServerLeave\020\006\022\020\n"
  "\014MembersQuery\020\007*2\n\020HandleServerType\022\016\n\nM"
  "etaServer\020\000\022\016\n\nDataServer\020\001*=\n\014ClientOpT"
  "ype\022\010\n\004Noop\020\000\022\007\n\003Put\020\001\022\007\n\003Get\020\002\022\007\n\003Del\020\003"
  "\022\010\n\004Scan\020\0042\264\003\n\007ERaftKv\022@\n\013RequestVote\022\027."
  "eraftkv.RequestVoteReq\032\030.eraftkv.Request"
  "VoteResp\022F\n\rAppendEntries\022\031.eraftkv.Appe"
  "ndEntriesReq\032\032.eraftkv.AppendEntriesResp"
  "\0227\n\010Snapshot\022\024.eraftkv.SnapshotReq\032\025.era"
  "ftkv.SnapshotResp\022;\n\nPutSSTFile\022\027.eraftk"
  "v.SSTFileContent\032\022.eraftkv.SSTFileId(\001\022O"
  "\n\022ProcessRWOperation\022\033.eraftkv.ClientOpe"
  "rationReq\032\034.eraftkv.ClientOperationResp\022"
  "X\n\023ClusterConfigChange\022\037.eraftkv.Cluster"
  "ConfigChangeReq\032 .eraftkv.ClusterConfigC"
  "hangeRespb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_eraftkv_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_eraftkv_2eproto_sccs[17] = {
  &scc_info_AppendEntriesReq_eraftkv_2eproto.base,
  &scc_info_AppendEntriesResp_eraftkv_2eproto.base,
  &scc_info_ClientOperationReq_eraftkv_2eproto.base,
  &scc_info_ClientOperationResp_eraftkv_2eproto.base,
  &scc_info_ClusterConfigChangeReq_eraftkv_2eproto.base,
  &scc_info_ClusterConfigChangeResp_eraftkv_2eproto.base,
  &scc_info_Entry_eraftkv_2eproto.base,
  &scc_info_KvOpPair_eraftkv_2eproto.base,
  &scc_info_RequestVoteReq_eraftkv_2eproto.base,
  &scc_info_RequestVoteResp_eraftkv_2eproto.base,
  &scc_info_SSTFileContent_eraftkv_2eproto.base,
  &scc_info_SSTFileId_eraftkv_2eproto.base,
  &scc_info_Server_eraftkv_2eproto.base,
  &scc_info_ShardGroup_eraftkv_2eproto.base,
  &scc_info_Slot_eraftkv_2eproto.base,
  &scc_info_SnapshotReq_eraftkv_2eproto.base,
  &scc_info_SnapshotResp_eraftkv_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_eraftkv_2eproto_once;
static bool descriptor_table_eraftkv_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_eraftkv_2eproto = {
  &descriptor_table_eraftkv_2eproto_initialized, descriptor_table_protodef_eraftkv_2eproto, "eraftkv.proto", 3137,
  &descriptor_table_eraftkv_2eproto_once, descriptor_table_eraftkv_2eproto_sccs, descriptor_table_eraftkv_2eproto_deps, 17, 0,
  schemas, file_default_instances, TableStruct_eraftkv_2eproto::offsets,
  file_level_metadata_eraftkv_2eproto, 17, file_level_enum_descriptors_eraftkv_2eproto, file_level_service_descriptors_eraftkv_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_eraftkv_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_eraftkv_2eproto), true);
namespace eraftkv {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_eraftkv_2eproto);
  return file_level_enum_descriptors_eraftkv_2eproto[0];
}
bool ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EntryType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_eraftkv_2eproto);
  return file_level_enum_descriptors_eraftkv_2eproto[1];
}
bool EntryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SlotStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_eraftkv_2eproto);
  return file_level_enum_descriptors_eraftkv_2eproto[2];
}
bool SlotStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_eraftkv_2eproto);
  return file_level_enum_descriptors_eraftkv_2eproto[3];
}
bool ServerStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChangeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_eraftkv_2eproto);
  return file_level_enum_descriptors_eraftkv_2eproto[4];
}
bool ChangeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HandleServerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_eraftkv_2eproto);
  return file_level_enum_descriptors_eraftkv_2eproto[5];
}
bool HandleServerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientOpType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_eraftkv_2eproto);
  return file_level_enum_descriptors_eraftkv_2eproto[6];
}
bool ClientOpType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void RequestVoteReq::InitAsDefaultInstance() {
}
class RequestVoteReq::_Internal {
 public:
};

RequestVoteReq::RequestVoteReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:eraftkv.RequestVoteReq)
}
RequestVoteReq::RequestVoteReq(const RequestVoteReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&prevote_) -
    reinterpret_cast<char*>(&term_)) + sizeof(prevote_));
  // @@protoc_insertion_point(copy_constructor:eraftkv.RequestVoteReq)
}

void RequestVoteReq::SharedCtor() {
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prevote_) -
      reinterpret_cast<char*>(&term_)) + sizeof(prevote_));
}

RequestVoteReq::~RequestVoteReq() {
  // @@protoc_insertion_point(destructor:eraftkv.RequestVoteReq)
  SharedDtor();
}

void RequestVoteReq::SharedDtor() {
}

void RequestVoteReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestVoteReq& RequestVoteReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestVoteReq_eraftkv_2eproto.base);
  return *internal_default_instance();
}


void RequestVoteReq::Clear() {
// @@protoc_insertion_point(message_clear_start:eraftkv.RequestVoteReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prevote_) -
      reinterpret_cast<char*>(&term_)) + sizeof(prevote_));
  _internal_metadata_.Clear();
}

const char* RequestVoteReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool prevote = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          prevote_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 term = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 candidtate_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          candidtate_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 last_log_idx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          last_log_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 last_log_term = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          last_log_term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestVoteReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:eraftkv.RequestVoteReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool prevote = 1;
  if (this->prevote() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_prevote(), target);
  }

  // int64 term = 2;
  if (this->term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_term(), target);
  }

  // int64 candidtate_id = 3;
  if (this->candidtate_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_candidtate_id(), target);
  }

  // int64 last_log_idx = 4;
  if (this->last_log_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_last_log_idx(), target);
  }

  // int64 last_log_term = 5;
  if (this->last_log_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_last_log_term(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eraftkv.RequestVoteReq)
  return target;
}

size_t RequestVoteReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eraftkv.RequestVoteReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 term = 2;
  if (this->term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_term());
  }

  // int64 candidtate_id = 3;
  if (this->candidtate_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_candidtate_id());
  }

  // int64 last_log_idx = 4;
  if (this->last_log_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_last_log_idx());
  }

  // int64 last_log_term = 5;
  if (this->last_log_term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_last_log_term());
  }

  // bool prevote = 1;
  if (this->prevote() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestVoteReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eraftkv.RequestVoteReq)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestVoteReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestVoteReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eraftkv.RequestVoteReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eraftkv.RequestVoteReq)
    MergeFrom(*source);
  }
}

void RequestVoteReq::MergeFrom(const RequestVoteReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eraftkv.RequestVoteReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from.candidtate_id() != 0) {
    _internal_set_candidtate_id(from._internal_candidtate_id());
  }
  if (from.last_log_idx() != 0) {
    _internal_set_last_log_idx(from._internal_last_log_idx());
  }
  if (from.last_log_term() != 0) {
    _internal_set_last_log_term(from._internal_last_log_term());
  }
  if (from.prevote() != 0) {
    _internal_set_prevote(from._internal_prevote());
  }
}

void RequestVoteReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eraftkv.RequestVoteReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestVoteReq::CopyFrom(const RequestVoteReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eraftkv.RequestVoteReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVoteReq::IsInitialized() const {
  return true;
}

void RequestVoteReq::InternalSwap(RequestVoteReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(term_, other->term_);
  swap(candidtate_id_, other->candidtate_id_);
  swap(last_log_idx_, other->last_log_idx_);
  swap(last_log_term_, other->last_log_term_);
  swap(prevote_, other->prevote_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestVoteReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestVoteResp::InitAsDefaultInstance() {
}
class RequestVoteResp::_Internal {
 public:
};

RequestVoteResp::RequestVoteResp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:eraftkv.RequestVoteResp)
}
RequestVoteResp::RequestVoteResp(const RequestVoteResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&request_term_, &from.request_term_,
    static_cast<size_t>(reinterpret_cast<char*>(&vote_granted_) -
    reinterpret_cast<char*>(&request_term_)) + sizeof(vote_granted_));
  // @@protoc_insertion_point(copy_constructor:eraftkv.RequestVoteResp)
}

void RequestVoteResp::SharedCtor() {
  ::memset(&request_term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vote_granted_) -
      reinterpret_cast<char*>(&request_term_)) + sizeof(vote_granted_));
}

RequestVoteResp::~RequestVoteResp() {
  // @@protoc_insertion_point(destructor:eraftkv.RequestVoteResp)
  SharedDtor();
}

void RequestVoteResp::SharedDtor() {
}

void RequestVoteResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestVoteResp& RequestVoteResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestVoteResp_eraftkv_2eproto.base);
  return *internal_default_instance();
}


void RequestVoteResp::Clear() {
// @@protoc_insertion_point(message_clear_start:eraftkv.RequestVoteResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&request_term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vote_granted_) -
      reinterpret_cast<char*>(&request_term_)) + sizeof(vote_granted_));
  _internal_metadata_.Clear();
}

const char* RequestVoteResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool prevote = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          prevote_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 request_term = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          request_term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 term = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool vote_granted = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          vote_granted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 leader_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          leader_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestVoteResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:eraftkv.RequestVoteResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool prevote = 1;
  if (this->prevote() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_prevote(), target);
  }

  // int64 request_term = 2;
  if (this->request_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_request_term(), target);
  }

  // int64 term = 3;
  if (this->term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_term(), target);
  }

  // bool vote_granted = 4;
  if (this->vote_granted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_vote_granted(), target);
  }

  // int64 leader_id = 5;
  if (this->leader_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_leader_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eraftkv.RequestVoteResp)
  return target;
}

size_t RequestVoteResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eraftkv.RequestVoteResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 request_term = 2;
  if (this->request_term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_request_term());
  }

  // int64 term = 3;
  if (this->term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_term());
  }

  // int64 leader_id = 5;
  if (this->leader_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_leader_id());
  }

  // bool prevote = 1;
  if (this->prevote() != 0) {
    total_size += 1 + 1;
  }

  // bool vote_granted = 4;
  if (this->vote_granted() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestVoteResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eraftkv.RequestVoteResp)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestVoteResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestVoteResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eraftkv.RequestVoteResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eraftkv.RequestVoteResp)
    MergeFrom(*source);
  }
}

void RequestVoteResp::MergeFrom(const RequestVoteResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eraftkv.RequestVoteResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_term() != 0) {
    _internal_set_request_term(from._internal_request_term());
  }
  if (from.term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from.leader_id() != 0) {
    _internal_set_leader_id(from._internal_leader_id());
  }
  if (from.prevote() != 0) {
    _internal_set_prevote(from._internal_prevote());
  }
  if (from.vote_granted() != 0) {
    _internal_set_vote_granted(from._internal_vote_granted());
  }
}

void RequestVoteResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eraftkv.RequestVoteResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestVoteResp::CopyFrom(const RequestVoteResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eraftkv.RequestVoteResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVoteResp::IsInitialized() const {
  return true;
}

void RequestVoteResp::InternalSwap(RequestVoteResp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(request_term_, other->request_term_);
  swap(term_, other->term_);
  swap(leader_id_, other->leader_id_);
  swap(prevote_, other->prevote_);
  swap(vote_granted_, other->vote_granted_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestVoteResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Entry::InitAsDefaultInstance() {
}
class Entry::_Internal {
 public:
};

Entry::Entry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:eraftkv.Entry)
}
Entry::Entry(const Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&e_type_) -
    reinterpret_cast<char*>(&term_)) + sizeof(e_type_));
  // @@protoc_insertion_point(copy_constructor:eraftkv.Entry)
}

void Entry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Entry_eraftkv_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&e_type_) -
      reinterpret_cast<char*>(&term_)) + sizeof(e_type_));
}

Entry::~Entry() {
  // @@protoc_insertion_point(destructor:eraftkv.Entry)
  SharedDtor();
}

void Entry::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Entry& Entry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Entry_eraftkv_2eproto.base);
  return *internal_default_instance();
}


void Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:eraftkv.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&e_type_) -
      reinterpret_cast<char*>(&term_)) + sizeof(e_type_));
  _internal_metadata_.Clear();
}

const char* Entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .eraftkv.EntryType e_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_e_type(static_cast<::eraftkv::EntryType>(val));
        } else goto handle_unusual;
        continue;
      // int64 data_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          data_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Entry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:eraftkv.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 term = 1;
  if (this->term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_term(), target);
  }

  // int64 id = 2;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_id(), target);
  }

  // .eraftkv.EntryType e_type = 3;
  if (this->e_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_e_type(), target);
  }

  // int64 data_size = 4;
  if (this->data_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_data_size(), target);
  }

  // bytes data = 5;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eraftkv.Entry)
  return target;
}

size_t Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eraftkv.Entry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 5;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int64 term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_term());
  }

  // int64 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // int64 data_size = 4;
  if (this->data_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_data_size());
  }

  // .eraftkv.EntryType e_type = 3;
  if (this->e_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_e_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Entry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eraftkv.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const Entry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Entry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eraftkv.Entry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eraftkv.Entry)
    MergeFrom(*source);
  }
}

void Entry::MergeFrom(const Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eraftkv.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.data_size() != 0) {
    _internal_set_data_size(from._internal_data_size());
  }
  if (from.e_type() != 0) {
    _internal_set_e_type(from._internal_e_type());
  }
}

void Entry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eraftkv.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entry::CopyFrom(const Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eraftkv.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entry::IsInitialized() const {
  return true;
}

void Entry::InternalSwap(Entry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(term_, other->term_);
  swap(id_, other->id_);
  swap(data_size_, other->data_size_);
  swap(e_type_, other->e_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Entry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppendEntriesReq::InitAsDefaultInstance() {
}
class AppendEntriesReq::_Internal {
 public:
};

AppendEntriesReq::AppendEntriesReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:eraftkv.AppendEntriesReq)
}
AppendEntriesReq::AppendEntriesReq(const AppendEntriesReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&leader_id_, &from.leader_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_heartbeat_) -
    reinterpret_cast<char*>(&leader_id_)) + sizeof(is_heartbeat_));
  // @@protoc_insertion_point(copy_constructor:eraftkv.AppendEntriesReq)
}

void AppendEntriesReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppendEntriesReq_eraftkv_2eproto.base);
  ::memset(&leader_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_heartbeat_) -
      reinterpret_cast<char*>(&leader_id_)) + sizeof(is_heartbeat_));
}

AppendEntriesReq::~AppendEntriesReq() {
  // @@protoc_insertion_point(destructor:eraftkv.AppendEntriesReq)
  SharedDtor();
}

void AppendEntriesReq::SharedDtor() {
}

void AppendEntriesReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppendEntriesReq& AppendEntriesReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppendEntriesReq_eraftkv_2eproto.base);
  return *internal_default_instance();
}


void AppendEntriesReq::Clear() {
// @@protoc_insertion_point(message_clear_start:eraftkv.AppendEntriesReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  ::memset(&leader_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_heartbeat_) -
      reinterpret_cast<char*>(&leader_id_)) + sizeof(is_heartbeat_));
  _internal_metadata_.Clear();
}

const char* AppendEntriesReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 leader_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          leader_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 message_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          message_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 term = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 prev_log_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          prev_log_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 prev_log_term = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          prev_log_term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 leader_commit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          leader_commit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_heartbeat = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          is_heartbeat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .eraftkv.Entry entries = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppendEntriesReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:eraftkv.AppendEntriesReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 leader_id = 1;
  if (this->leader_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_leader_id(), target);
  }

  // int64 message_index = 2;
  if (this->message_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_message_index(), target);
  }

  // int64 term = 3;
  if (this->term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_term(), target);
  }

  // int64 prev_log_index = 4;
  if (this->prev_log_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_prev_log_index(), target);
  }

  // int64 prev_log_term = 5;
  if (this->prev_log_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_prev_log_term(), target);
  }

  // int64 leader_commit = 6;
  if (this->leader_commit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_leader_commit(), target);
  }

  // bool is_heartbeat = 7;
  if (this->is_heartbeat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_heartbeat(), target);
  }

  // repeated .eraftkv.Entry entries = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eraftkv.AppendEntriesReq)
  return target;
}

size_t AppendEntriesReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eraftkv.AppendEntriesReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .eraftkv.Entry entries = 8;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 leader_id = 1;
  if (this->leader_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_leader_id());
  }

  // int64 message_index = 2;
  if (this->message_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_message_index());
  }

  // int64 term = 3;
  if (this->term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_term());
  }

  // int64 prev_log_index = 4;
  if (this->prev_log_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_prev_log_index());
  }

  // int64 prev_log_term = 5;
  if (this->prev_log_term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_prev_log_term());
  }

  // int64 leader_commit = 6;
  if (this->leader_commit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_leader_commit());
  }

  // bool is_heartbeat = 7;
  if (this->is_heartbeat() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppendEntriesReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eraftkv.AppendEntriesReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AppendEntriesReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppendEntriesReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eraftkv.AppendEntriesReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eraftkv.AppendEntriesReq)
    MergeFrom(*source);
  }
}

void AppendEntriesReq::MergeFrom(const AppendEntriesReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eraftkv.AppendEntriesReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from.leader_id() != 0) {
    _internal_set_leader_id(from._internal_leader_id());
  }
  if (from.message_index() != 0) {
    _internal_set_message_index(from._internal_message_index());
  }
  if (from.term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from.prev_log_index() != 0) {
    _internal_set_prev_log_index(from._internal_prev_log_index());
  }
  if (from.prev_log_term() != 0) {
    _internal_set_prev_log_term(from._internal_prev_log_term());
  }
  if (from.leader_commit() != 0) {
    _internal_set_leader_commit(from._internal_leader_commit());
  }
  if (from.is_heartbeat() != 0) {
    _internal_set_is_heartbeat(from._internal_is_heartbeat());
  }
}

void AppendEntriesReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eraftkv.AppendEntriesReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendEntriesReq::CopyFrom(const AppendEntriesReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eraftkv.AppendEntriesReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesReq::IsInitialized() const {
  return true;
}

void AppendEntriesReq::InternalSwap(AppendEntriesReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
  swap(leader_id_, other->leader_id_);
  swap(message_index_, other->message_index_);
  swap(term_, other->term_);
  swap(prev_log_index_, other->prev_log_index_);
  swap(prev_log_term_, other->prev_log_term_);
  swap(leader_commit_, other->leader_commit_);
  swap(is_heartbeat_, other->is_heartbeat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendEntriesReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppendEntriesResp::InitAsDefaultInstance() {
}
class AppendEntriesResp::_Internal {
 public:
};

AppendEntriesResp::AppendEntriesResp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:eraftkv.AppendEntriesResp)
}
AppendEntriesResp::AppendEntriesResp(const AppendEntriesResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message_token().empty()) {
    message_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_token_);
  }
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&term_)) + sizeof(success_));
  // @@protoc_insertion_point(copy_constructor:eraftkv.AppendEntriesResp)
}

void AppendEntriesResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppendEntriesResp_eraftkv_2eproto.base);
  message_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&term_)) + sizeof(success_));
}

AppendEntriesResp::~AppendEntriesResp() {
  // @@protoc_insertion_point(destructor:eraftkv.AppendEntriesResp)
  SharedDtor();
}

void AppendEntriesResp::SharedDtor() {
  message_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppendEntriesResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppendEntriesResp& AppendEntriesResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppendEntriesResp_eraftkv_2eproto.base);
  return *internal_default_instance();
}


void AppendEntriesResp::Clear() {
// @@protoc_insertion_point(message_clear_start:eraftkv.AppendEntriesResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&term_)) + sizeof(success_));
  _internal_metadata_.Clear();
}

const char* AppendEntriesResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string message_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "eraftkv.AppendEntriesResp.message_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 term = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 current_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          current_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 conflict_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          conflict_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 conflict_term = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          conflict_term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppendEntriesResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:eraftkv.AppendEntriesResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message_token = 1;
  if (this->message_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_token().data(), static_cast<int>(this->_internal_message_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "eraftkv.AppendEntriesResp.message_token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message_token(), target);
  }

  // int64 term = 2;
  if (this->term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_term(), target);
  }

  // bool success = 3;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_success(), target);
  }

  // int64 current_index = 4;
  if (this->current_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_current_index(), target);
  }

  // int64 conflict_index = 5;
  if (this->conflict_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_conflict_index(), target);
  }

  // int64 conflict_term = 6;
  if (this->conflict_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_conflict_term(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eraftkv.AppendEntriesResp)
  return target;
}

size_t AppendEntriesResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eraftkv.AppendEntriesResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message_token = 1;
  if (this->message_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_token());
  }

  // int64 term = 2;
  if (this->term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_term());
  }

  // int64 current_index = 4;
  if (this->current_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_current_index());
  }

  // int64 conflict_index = 5;
  if (this->conflict_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_conflict_index());
  }

  // int64 conflict_term = 6;
  if (this->conflict_term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_conflict_term());
  }

  // bool success = 3;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppendEntriesResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eraftkv.AppendEntriesResp)
  GOOGLE_DCHECK_NE(&from, this);
  const AppendEntriesResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppendEntriesResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eraftkv.AppendEntriesResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eraftkv.AppendEntriesResp)
    MergeFrom(*source);
  }
}

void AppendEntriesResp::MergeFrom(const AppendEntriesResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eraftkv.AppendEntriesResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message_token().size() > 0) {

    message_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_token_);
  }
  if (from.term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from.current_index() != 0) {
    _internal_set_current_index(from._internal_current_index());
  }
  if (from.conflict_index() != 0) {
    _internal_set_conflict_index(from._internal_conflict_index());
  }
  if (from.conflict_term() != 0) {
    _internal_set_conflict_term(from._internal_conflict_term());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void AppendEntriesResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eraftkv.AppendEntriesResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendEntriesResp::CopyFrom(const AppendEntriesResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eraftkv.AppendEntriesResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesResp::IsInitialized() const {
  return true;
}

void AppendEntriesResp::InternalSwap(AppendEntriesResp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  message_token_.Swap(&other->message_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(term_, other->term_);
  swap(current_index_, other->current_index_);
  swap(conflict_index_, other->conflict_index_);
  swap(conflict_term_, other->conflict_term_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendEntriesResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SnapshotReq::InitAsDefaultInstance() {
}
class SnapshotReq::_Internal {
 public:
};

SnapshotReq::SnapshotReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:eraftkv.SnapshotReq)
}
SnapshotReq::SnapshotReq(const SnapshotReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message_index().empty()) {
    message_index_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_index_);
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&done_) -
    reinterpret_cast<char*>(&term_)) + sizeof(done_));
  // @@protoc_insertion_point(copy_constructor:eraftkv.SnapshotReq)
}

void SnapshotReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SnapshotReq_eraftkv_2eproto.base);
  message_index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&done_) -
      reinterpret_cast<char*>(&term_)) + sizeof(done_));
}

SnapshotReq::~SnapshotReq() {
  // @@protoc_insertion_point(destructor:eraftkv.SnapshotReq)
  SharedDtor();
}

void SnapshotReq::SharedDtor() {
  message_index_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SnapshotReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SnapshotReq& SnapshotReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SnapshotReq_eraftkv_2eproto.base);
  return *internal_default_instance();
}


void SnapshotReq::Clear() {
// @@protoc_insertion_point(message_clear_start:eraftkv.SnapshotReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_index_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&done_) -
      reinterpret_cast<char*>(&term_)) + sizeof(done_));
  _internal_metadata_.Clear();
}

const char* SnapshotReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 leader_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          leader_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_message_index();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "eraftkv.SnapshotReq.message_index"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 last_included_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          last_included_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 last_included_term = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          last_included_term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 offset = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool done = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          done_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SnapshotReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:eraftkv.SnapshotReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 term = 1;
  if (this->term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_term(), target);
  }

  // int64 leader_id = 2;
  if (this->leader_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_leader_id(), target);
  }

  // string message_index = 3;
  if (this->message_index().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_index().data(), static_cast<int>(this->_internal_message_index().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "eraftkv.SnapshotReq.message_index");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message_index(), target);
  }

  // int64 last_included_index = 4;
  if (this->last_included_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_last_included_index(), target);
  }

  // int64 last_included_term = 5;
  if (this->last_included_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_last_included_term(), target);
  }

  // int64 offset = 6;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_offset(), target);
  }

  // bytes data = 7;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_data(), target);
  }

  // bool done = 8;
  if (this->done() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_done(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eraftkv.SnapshotReq)
  return target;
}

size_t SnapshotReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eraftkv.SnapshotReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message_index = 3;
  if (this->message_index().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_index());
  }

  // bytes data = 7;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int64 term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_term());
  }

  // int64 leader_id = 2;
  if (this->leader_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_leader_id());
  }

  // int64 last_included_index = 4;
  if (this->last_included_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_last_included_index());
  }

  // int64 last_included_term = 5;
  if (this->last_included_term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_last_included_term());
  }

  // int64 offset = 6;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offset());
  }

  // bool done = 8;
  if (this->done() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SnapshotReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eraftkv.SnapshotReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SnapshotReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SnapshotReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eraftkv.SnapshotReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eraftkv.SnapshotReq)
    MergeFrom(*source);
  }
}

void SnapshotReq::MergeFrom(const SnapshotReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eraftkv.SnapshotReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message_index().size() > 0) {

    message_index_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_index_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from.leader_id() != 0) {
    _internal_set_leader_id(from._internal_leader_id());
  }
  if (from.last_included_index() != 0) {
    _internal_set_last_included_index(from._internal_last_included_index());
  }
  if (from.last_included_term() != 0) {
    _internal_set_last_included_term(from._internal_last_included_term());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from.done() != 0) {
    _internal_set_done(from._internal_done());
  }
}

void SnapshotReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eraftkv.SnapshotReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotReq::CopyFrom(const SnapshotReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eraftkv.SnapshotReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotReq::IsInitialized() const {
  return true;
}

void SnapshotReq::InternalSwap(SnapshotReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  message_index_.Swap(&other->message_index_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(term_, other->term_);
  swap(leader_id_, other->leader_id_);
  swap(last_included_index_, other->last_included_index_);
  swap(last_included_term_, other->last_included_term_);
  swap(offset_, other->offset_);
  swap(done_, other->done_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SnapshotReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SnapshotResp::InitAsDefaultInstance() {
}
class SnapshotResp::_Internal {
 public:
};

SnapshotResp::SnapshotResp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:eraftkv.SnapshotResp)
}
SnapshotResp::SnapshotResp(const SnapshotResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message_index().empty()) {
    message_index_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_index_);
  }
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_last_chunk_) -
    reinterpret_cast<char*>(&term_)) + sizeof(is_last_chunk_));
  // @@protoc_insertion_point(copy_constructor:eraftkv.SnapshotResp)
}

void SnapshotResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SnapshotResp_eraftkv_2eproto.base);
  message_index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_last_chunk_) -
      reinterpret_cast<char*>(&term_)) + sizeof(is_last_chunk_));
}

SnapshotResp::~SnapshotResp() {
  // @@protoc_insertion_point(destructor:eraftkv.SnapshotResp)
  SharedDtor();
}

void SnapshotResp::SharedDtor() {
  message_index_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SnapshotResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SnapshotResp& SnapshotResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SnapshotResp_eraftkv_2eproto.base);
  return *internal_default_instance();
}


void SnapshotResp::Clear() {
// @@protoc_insertion_point(message_clear_start:eraftkv.SnapshotResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_index_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_last_chunk_) -
      reinterpret_cast<char*>(&term_)) + sizeof(is_last_chunk_));
  _internal_metadata_.Clear();
}

const char* SnapshotResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message_index();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "eraftkv.SnapshotResp.message_index"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_last_chunk = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          is_last_chunk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SnapshotResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:eraftkv.SnapshotResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 term = 1;
  if (this->term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_term(), target);
  }

  // string message_index = 2;
  if (this->message_index().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_index().data(), static_cast<int>(this->_internal_message_index().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "eraftkv.SnapshotResp.message_index");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message_index(), target);
  }

  // int64 offset = 3;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_offset(), target);
  }

  // bool success = 4;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_success(), target);
  }

  // bool is_last_chunk = 5;
  if (this->is_last_chunk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_last_chunk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eraftkv.SnapshotResp)
  return target;
}

size_t SnapshotResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eraftkv.SnapshotResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message_index = 2;
  if (this->message_index().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_index());
  }

  // int64 term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_term());
  }

  // int64 offset = 3;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offset());
  }

  // bool success = 4;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // bool is_last_chunk = 5;
  if (this->is_last_chunk() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SnapshotResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eraftkv.SnapshotResp)
  GOOGLE_DCHECK_NE(&from, this);
  const SnapshotResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SnapshotResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eraftkv.SnapshotResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eraftkv.SnapshotResp)
    MergeFrom(*source);
  }
}

void SnapshotResp::MergeFrom(const SnapshotResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eraftkv.SnapshotResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message_index().size() > 0) {

    message_index_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_index_);
  }
  if (from.term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (from.is_last_chunk() != 0) {
    _internal_set_is_last_chunk(from._internal_is_last_chunk());
  }
}

void SnapshotResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eraftkv.SnapshotResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotResp::CopyFrom(const SnapshotResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eraftkv.SnapshotResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotResp::IsInitialized() const {
  return true;
}

void SnapshotResp::InternalSwap(SnapshotResp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  message_index_.Swap(&other->message_index_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(term_, other->term_);
  swap(offset_, other->offset_);
  swap(success_, other->success_);
  swap(is_last_chunk_, other->is_last_chunk_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SnapshotResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Slot::InitAsDefaultInstance() {
}
class Slot::_Internal {
 public:
};

Slot::Slot()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:eraftkv.Slot)
}
Slot::Slot(const Slot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&slot_status_) -
    reinterpret_cast<char*>(&id_)) + sizeof(slot_status_));
  // @@protoc_insertion_point(copy_constructor:eraftkv.Slot)
}

void Slot::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slot_status_) -
      reinterpret_cast<char*>(&id_)) + sizeof(slot_status_));
}

Slot::~Slot() {
  // @@protoc_insertion_point(destructor:eraftkv.Slot)
  SharedDtor();
}

void Slot::SharedDtor() {
}

void Slot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Slot& Slot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Slot_eraftkv_2eproto.base);
  return *internal_default_instance();
}


void Slot::Clear() {
// @@protoc_insertion_point(message_clear_start:eraftkv.Slot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slot_status_) -
      reinterpret_cast<char*>(&id_)) + sizeof(slot_status_));
  _internal_metadata_.Clear();
}

const char* Slot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .eraftkv.SlotStatus slot_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_slot_status(static_cast<::eraftkv::SlotStatus>(val));
        } else goto handle_unusual;
        continue;
      // int64 status_modify_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          status_modify_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Slot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:eraftkv.Slot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // .eraftkv.SlotStatus slot_status = 2;
  if (this->slot_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_slot_status(), target);
  }

  // int64 status_modify_time = 3;
  if (this->status_modify_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_status_modify_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eraftkv.Slot)
  return target;
}

size_t Slot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eraftkv.Slot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // int64 status_modify_time = 3;
  if (this->status_modify_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_status_modify_time());
  }

  // .eraftkv.SlotStatus slot_status = 2;
  if (this->slot_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_slot_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Slot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eraftkv.Slot)
  GOOGLE_DCHECK_NE(&from, this);
  const Slot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Slot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eraftkv.Slot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eraftkv.Slot)
    MergeFrom(*source);
  }
}

void Slot::MergeFrom(const Slot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eraftkv.Slot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.status_modify_time() != 0) {
    _internal_set_status_modify_time(from._internal_status_modify_time());
  }
  if (from.slot_status() != 0) {
    _internal_set_slot_status(from._internal_slot_status());
  }
}

void Slot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eraftkv.Slot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Slot::CopyFrom(const Slot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eraftkv.Slot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Slot::IsInitialized() const {
  return true;
}

void Slot::InternalSwap(Slot* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(status_modify_time_, other->status_modify_time_);
  swap(slot_status_, other->slot_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Slot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Server::InitAsDefaultInstance() {
}
class Server::_Internal {
 public:
};

Server::Server()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:eraftkv.Server)
}
Server::Server(const Server& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_status_) -
    reinterpret_cast<char*>(&id_)) + sizeof(server_status_));
  // @@protoc_insertion_point(copy_constructor:eraftkv.Server)
}

void Server::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Server_eraftkv_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_status_) -
      reinterpret_cast<char*>(&id_)) + sizeof(server_status_));
}

Server::~Server() {
  // @@protoc_insertion_point(destructor:eraftkv.Server)
  SharedDtor();
}

void Server::SharedDtor() {
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Server::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Server& Server::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Server_eraftkv_2eproto.base);
  return *internal_default_instance();
}


void Server::Clear() {
// @@protoc_insertion_point(message_clear_start:eraftkv.Server)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_status_) -
      reinterpret_cast<char*>(&id_)) + sizeof(server_status_));
  _internal_metadata_.Clear();
}

const char* Server::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "eraftkv.Server.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .eraftkv.ServerStatus server_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_server_status(static_cast<::eraftkv::ServerStatus>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Server::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:eraftkv.Server)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string address = 2;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "eraftkv.Server.address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_address(), target);
  }

  // .eraftkv.ServerStatus server_status = 3;
  if (this->server_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_server_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eraftkv.Server)
  return target;
}

size_t Server::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eraftkv.Server)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 2;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // .eraftkv.ServerStatus server_status = 3;
  if (this->server_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_server_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Server::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eraftkv.Server)
  GOOGLE_DCHECK_NE(&from, this);
  const Server* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Server>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eraftkv.Server)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eraftkv.Server)
    MergeFrom(*source);
  }
}

void Server::MergeFrom(const Server& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eraftkv.Server)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.server_status() != 0) {
    _internal_set_server_status(from._internal_server_status());
  }
}

void Server::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eraftkv.Server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Server::CopyFrom(const Server& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eraftkv.Server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Server::IsInitialized() const {
  return true;
}

void Server::InternalSwap(Server* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(server_status_, other->server_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Server::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShardGroup::InitAsDefaultInstance() {
}
class ShardGroup::_Internal {
 public:
};

ShardGroup::ShardGroup()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:eraftkv.ShardGroup)
}
ShardGroup::ShardGroup(const ShardGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      slots_(from.slots_),
      servers_(from.servers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&leader_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(leader_id_));
  // @@protoc_insertion_point(copy_constructor:eraftkv.ShardGroup)
}

void ShardGroup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShardGroup_eraftkv_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leader_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(leader_id_));
}

ShardGroup::~ShardGroup() {
  // @@protoc_insertion_point(destructor:eraftkv.ShardGroup)
  SharedDtor();
}

void ShardGroup::SharedDtor() {
}

void ShardGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShardGroup& ShardGroup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShardGroup_eraftkv_2eproto.base);
  return *internal_default_instance();
}


void ShardGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:eraftkv.ShardGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slots_.Clear();
  servers_.Clear();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leader_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(leader_id_));
  _internal_metadata_.Clear();
}

const char* ShardGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .eraftkv.Slot slots = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_slots(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .eraftkv.Server servers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_servers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 leader_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          leader_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShardGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:eraftkv.ShardGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // repeated .eraftkv.Slot slots = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_slots_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_slots(i), target, stream);
  }

  // repeated .eraftkv.Server servers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_servers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_servers(i), target, stream);
  }

  // int64 leader_id = 4;
  if (this->leader_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_leader_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eraftkv.ShardGroup)
  return target;
}

size_t ShardGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eraftkv.ShardGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .eraftkv.Slot slots = 2;
  total_size += 1UL * this->_internal_slots_size();
  for (const auto& msg : this->slots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .eraftkv.Server servers = 3;
  total_size += 1UL * this->_internal_servers_size();
  for (const auto& msg : this->servers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // int64 leader_id = 4;
  if (this->leader_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_leader_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShardGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eraftkv.ShardGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const ShardGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShardGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eraftkv.ShardGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eraftkv.ShardGroup)
    MergeFrom(*source);
  }
}

void ShardGroup::MergeFrom(const ShardGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eraftkv.ShardGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  slots_.MergeFrom(from.slots_);
  servers_.MergeFrom(from.servers_);
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.leader_id() != 0) {
    _internal_set_leader_id(from._internal_leader_id());
  }
}

void ShardGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eraftkv.ShardGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShardGroup::CopyFrom(const ShardGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eraftkv.ShardGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardGroup::IsInitialized() const {
  return true;
}

void ShardGroup::InternalSwap(ShardGroup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  slots_.InternalSwap(&other->slots_);
  servers_.InternalSwap(&other->servers_);
  swap(id_, other->id_);
  swap(leader_id_, other->leader_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShardGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClusterConfigChangeReq::InitAsDefaultInstance() {
  ::eraftkv::_ClusterConfigChangeReq_default_instance_._instance.get_mutable()->server_ = const_cast< ::eraftkv::Server*>(
      ::eraftkv::Server::internal_default_instance());
  ::eraftkv::_ClusterConfigChangeReq_default_instance_._instance.get_mutable()->shard_group_ = const_cast< ::eraftkv::ShardGroup*>(
      ::eraftkv::ShardGroup::internal_default_instance());
}
class ClusterConfigChangeReq::_Internal {
 public:
  static const ::eraftkv::Server& server(const ClusterConfigChangeReq* msg);
  static const ::eraftkv::ShardGroup& shard_group(const ClusterConfigChangeReq* msg);
};

const ::eraftkv::Server&
ClusterConfigChangeReq::_Internal::server(const ClusterConfigChangeReq* msg) {
  return *msg->server_;
}
const ::eraftkv::ShardGroup&
ClusterConfigChangeReq::_Internal::shard_group(const ClusterConfigChangeReq* msg) {
  return *msg->shard_group_;
}
ClusterConfigChangeReq::ClusterConfigChangeReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:eraftkv.ClusterConfigChangeReq)
}
ClusterConfigChangeReq::ClusterConfigChangeReq(const ClusterConfigChangeReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_id().empty()) {
    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from._internal_has_server()) {
    server_ = new ::eraftkv::Server(*from.server_);
  } else {
    server_ = nullptr;
  }
  if (from._internal_has_shard_group()) {
    shard_group_ = new ::eraftkv::ShardGroup(*from.shard_group_);
  } else {
    shard_group_ = nullptr;
  }
  ::memcpy(&change_type_, &from.change_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&command_id_) -
    reinterpret_cast<char*>(&change_type_)) + sizeof(command_id_));
  // @@protoc_insertion_point(copy_constructor:eraftkv.ClusterConfigChangeReq)
}

void ClusterConfigChangeReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClusterConfigChangeReq_eraftkv_2eproto.base);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&command_id_) -
      reinterpret_cast<char*>(&server_)) + sizeof(command_id_));
}

ClusterConfigChangeReq::~ClusterConfigChangeReq() {
  // @@protoc_insertion_point(destructor:eraftkv.ClusterConfigChangeReq)
  SharedDtor();
}

void ClusterConfigChangeReq::SharedDtor() {
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete server_;
  if (this != internal_default_instance()) delete shard_group_;
}

void ClusterConfigChangeReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClusterConfigChangeReq& ClusterConfigChangeReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClusterConfigChangeReq_eraftkv_2eproto.base);
  return *internal_default_instance();
}


void ClusterConfigChangeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:eraftkv.ClusterConfigChangeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && server_ != nullptr) {
    delete server_;
  }
  server_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && shard_group_ != nullptr) {
    delete shard_group_;
  }
  shard_group_ = nullptr;
  ::memset(&change_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&command_id_) -
      reinterpret_cast<char*>(&change_type_)) + sizeof(command_id_));
  _internal_metadata_.Clear();
}

const char* ClusterConfigChangeReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .eraftkv.ChangeType change_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_change_type(static_cast<::eraftkv::ChangeType>(val));
        } else goto handle_unusual;
        continue;
      // .eraftkv.HandleServerType handle_server_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_handle_server_type(static_cast<::eraftkv::HandleServerType>(val));
        } else goto handle_unusual;
        continue;
      // int64 shard_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          shard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .eraftkv.Server server = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_server(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 config_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          config_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 op_sign = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          op_sign_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 command_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          command_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string client_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "eraftkv.ClusterConfigChangeReq.client_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .eraftkv.ShardGroup shard_group = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_shard_group(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClusterConfigChangeReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:eraftkv.ClusterConfigChangeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .eraftkv.ChangeType change_type = 1;
  if (this->change_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_change_type(), target);
  }

  // .eraftkv.HandleServerType handle_server_type = 2;
  if (this->handle_server_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_handle_server_type(), target);
  }

  // int64 shard_id = 3;
  if (this->shard_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_shard_id(), target);
  }

  // .eraftkv.Server server = 4;
  if (this->has_server()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::server(this), target, stream);
  }

  // int64 config_version = 5;
  if (this->config_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_config_version(), target);
  }

  // int64 op_sign = 6;
  if (this->op_sign() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_op_sign(), target);
  }

  // int64 command_id = 7;
  if (this->command_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_command_id(), target);
  }

  // string client_id = 8;
  if (this->client_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "eraftkv.ClusterConfigChangeReq.client_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_client_id(), target);
  }

  // .eraftkv.ShardGroup shard_group = 9;
  if (this->has_shard_group()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::shard_group(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eraftkv.ClusterConfigChangeReq)
  return target;
}

size_t ClusterConfigChangeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eraftkv.ClusterConfigChangeReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 8;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  // .eraftkv.Server server = 4;
  if (this->has_server()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *server_);
  }

  // .eraftkv.ShardGroup shard_group = 9;
  if (this->has_shard_group()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shard_group_);
  }

  // .eraftkv.ChangeType change_type = 1;
  if (this->change_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_change_type());
  }

  // .eraftkv.HandleServerType handle_server_type = 2;
  if (this->handle_server_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_handle_server_type());
  }

  // int64 shard_id = 3;
  if (this->shard_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_shard_id());
  }

  // int64 config_version = 5;
  if (this->config_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_config_version());
  }

  // int64 op_sign = 6;
  if (this->op_sign() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_op_sign());
  }

  // int64 command_id = 7;
  if (this->command_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_command_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClusterConfigChangeReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eraftkv.ClusterConfigChangeReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ClusterConfigChangeReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClusterConfigChangeReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eraftkv.ClusterConfigChangeReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eraftkv.ClusterConfigChangeReq)
    MergeFrom(*source);
  }
}

void ClusterConfigChangeReq::MergeFrom(const ClusterConfigChangeReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eraftkv.ClusterConfigChangeReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.has_server()) {
    _internal_mutable_server()->::eraftkv::Server::MergeFrom(from._internal_server());
  }
  if (from.has_shard_group()) {
    _internal_mutable_shard_group()->::eraftkv::ShardGroup::MergeFrom(from._internal_shard_group());
  }
  if (from.change_type() != 0) {
    _internal_set_change_type(from._internal_change_type());
  }
  if (from.handle_server_type() != 0) {
    _internal_set_handle_server_type(from._internal_handle_server_type());
  }
  if (from.shard_id() != 0) {
    _internal_set_shard_id(from._internal_shard_id());
  }
  if (from.config_version() != 0) {
    _internal_set_config_version(from._internal_config_version());
  }
  if (from.op_sign() != 0) {
    _internal_set_op_sign(from._internal_op_sign());
  }
  if (from.command_id() != 0) {
    _internal_set_command_id(from._internal_command_id());
  }
}

void ClusterConfigChangeReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eraftkv.ClusterConfigChangeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterConfigChangeReq::CopyFrom(const ClusterConfigChangeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eraftkv.ClusterConfigChangeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClusterConfigChangeReq::IsInitialized() const {
  return true;
}

void ClusterConfigChangeReq::InternalSwap(ClusterConfigChangeReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  client_id_.Swap(&other->client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(server_, other->server_);
  swap(shard_group_, other->shard_group_);
  swap(change_type_, other->change_type_);
  swap(handle_server_type_, other->handle_server_type_);
  swap(shard_id_, other->shard_id_);
  swap(config_version_, other->config_version_);
  swap(op_sign_, other->op_sign_);
  swap(command_id_, other->command_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClusterConfigChangeReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClusterConfigChangeResp::InitAsDefaultInstance() {
}
class ClusterConfigChangeResp::_Internal {
 public:
};

ClusterConfigChangeResp::ClusterConfigChangeResp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:eraftkv.ClusterConfigChangeResp)
}
ClusterConfigChangeResp::ClusterConfigChangeResp(const ClusterConfigChangeResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      shard_group_(from.shard_group_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&leader_addr_) -
    reinterpret_cast<char*>(&success_)) + sizeof(leader_addr_));
  // @@protoc_insertion_point(copy_constructor:eraftkv.ClusterConfigChangeResp)
}

void ClusterConfigChangeResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClusterConfigChangeResp_eraftkv_2eproto.base);
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leader_addr_) -
      reinterpret_cast<char*>(&success_)) + sizeof(leader_addr_));
}

ClusterConfigChangeResp::~ClusterConfigChangeResp() {
  // @@protoc_insertion_point(destructor:eraftkv.ClusterConfigChangeResp)
  SharedDtor();
}

void ClusterConfigChangeResp::SharedDtor() {
}

void ClusterConfigChangeResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClusterConfigChangeResp& ClusterConfigChangeResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClusterConfigChangeResp_eraftkv_2eproto.base);
  return *internal_default_instance();
}


void ClusterConfigChangeResp::Clear() {
// @@protoc_insertion_point(message_clear_start:eraftkv.ClusterConfigChangeResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shard_group_.Clear();
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leader_addr_) -
      reinterpret_cast<char*>(&success_)) + sizeof(leader_addr_));
  _internal_metadata_.Clear();
}

const char* ClusterConfigChangeResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .eraftkv.ShardGroup shard_group = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shard_group(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 config_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          config_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .eraftkv.ErrorCode error_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_error_code(static_cast<::eraftkv::ErrorCode>(val));
        } else goto handle_unusual;
        continue;
      // int64 leader_addr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          leader_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClusterConfigChangeResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:eraftkv.ClusterConfigChangeResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // repeated .eraftkv.ShardGroup shard_group = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shard_group_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_shard_group(i), target, stream);
  }

  // int64 config_version = 3;
  if (this->config_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_config_version(), target);
  }

  // .eraftkv.ErrorCode error_code = 4;
  if (this->error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_error_code(), target);
  }

  // int64 leader_addr = 5;
  if (this->leader_addr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_leader_addr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eraftkv.ClusterConfigChangeResp)
  return target;
}

size_t ClusterConfigChangeResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eraftkv.ClusterConfigChangeResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .eraftkv.ShardGroup shard_group = 2;
  total_size += 1UL * this->_internal_shard_group_size();
  for (const auto& msg : this->shard_group_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // .eraftkv.ErrorCode error_code = 4;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error_code());
  }

  // int64 config_version = 3;
  if (this->config_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_config_version());
  }

  // int64 leader_addr = 5;
  if (this->leader_addr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_leader_addr());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClusterConfigChangeResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eraftkv.ClusterConfigChangeResp)
  GOOGLE_DCHECK_NE(&from, this);
  const ClusterConfigChangeResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClusterConfigChangeResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eraftkv.ClusterConfigChangeResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eraftkv.ClusterConfigChangeResp)
    MergeFrom(*source);
  }
}

void ClusterConfigChangeResp::MergeFrom(const ClusterConfigChangeResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eraftkv.ClusterConfigChangeResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shard_group_.MergeFrom(from.shard_group_);
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (from.error_code() != 0) {
    _internal_set_error_code(from._internal_error_code());
  }
  if (from.config_version() != 0) {
    _internal_set_config_version(from._internal_config_version());
  }
  if (from.leader_addr() != 0) {
    _internal_set_leader_addr(from._internal_leader_addr());
  }
}

void ClusterConfigChangeResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eraftkv.ClusterConfigChangeResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterConfigChangeResp::CopyFrom(const ClusterConfigChangeResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eraftkv.ClusterConfigChangeResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClusterConfigChangeResp::IsInitialized() const {
  return true;
}

void ClusterConfigChangeResp::InternalSwap(ClusterConfigChangeResp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  shard_group_.InternalSwap(&other->shard_group_);
  swap(success_, other->success_);
  swap(error_code_, other->error_code_);
  swap(config_version_, other->config_version_);
  swap(leader_addr_, other->leader_addr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClusterConfigChangeResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KvOpPair::InitAsDefaultInstance() {
}
class KvOpPair::_Internal {
 public:
};

KvOpPair::KvOpPair()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:eraftkv.KvOpPair)
}
KvOpPair::KvOpPair(const KvOpPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  ::memcpy(&op_type_, &from.op_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&op_sign_) -
    reinterpret_cast<char*>(&op_type_)) + sizeof(op_sign_));
  // @@protoc_insertion_point(copy_constructor:eraftkv.KvOpPair)
}

void KvOpPair::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KvOpPair_eraftkv_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&op_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&op_sign_) -
      reinterpret_cast<char*>(&op_type_)) + sizeof(op_sign_));
}

KvOpPair::~KvOpPair() {
  // @@protoc_insertion_point(destructor:eraftkv.KvOpPair)
  SharedDtor();
}

void KvOpPair::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KvOpPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KvOpPair& KvOpPair::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KvOpPair_eraftkv_2eproto.base);
  return *internal_default_instance();
}


void KvOpPair::Clear() {
// @@protoc_insertion_point(message_clear_start:eraftkv.KvOpPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&op_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&op_sign_) -
      reinterpret_cast<char*>(&op_type_)) + sizeof(op_sign_));
  _internal_metadata_.Clear();
}

const char* KvOpPair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .eraftkv.ClientOpType op_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_op_type(static_cast<::eraftkv::ClientOpType>(val));
        } else goto handle_unusual;
        continue;
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "eraftkv.KvOpPair.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "eraftkv.KvOpPair.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 op_sign = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          op_sign_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KvOpPair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:eraftkv.KvOpPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .eraftkv.ClientOpType op_type = 1;
  if (this->op_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_op_type(), target);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "eraftkv.KvOpPair.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  // string value = 3;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "eraftkv.KvOpPair.value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  // bool success = 4;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_success(), target);
  }

  // int64 op_sign = 5;
  if (this->op_sign() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_op_sign(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eraftkv.KvOpPair)
  return target;
}

size_t KvOpPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eraftkv.KvOpPair)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // .eraftkv.ClientOpType op_type = 1;
  if (this->op_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op_type());
  }

  // bool success = 4;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // int64 op_sign = 5;
  if (this->op_sign() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_op_sign());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KvOpPair::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eraftkv.KvOpPair)
  GOOGLE_DCHECK_NE(&from, this);
  const KvOpPair* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KvOpPair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eraftkv.KvOpPair)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eraftkv.KvOpPair)
    MergeFrom(*source);
  }
}

void KvOpPair::MergeFrom(const KvOpPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eraftkv.KvOpPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.op_type() != 0) {
    _internal_set_op_type(from._internal_op_type());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (from.op_sign() != 0) {
    _internal_set_op_sign(from._internal_op_sign());
  }
}

void KvOpPair::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eraftkv.KvOpPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KvOpPair::CopyFrom(const KvOpPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eraftkv.KvOpPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvOpPair::IsInitialized() const {
  return true;
}

void KvOpPair::InternalSwap(KvOpPair* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(op_type_, other->op_type_);
  swap(success_, other->success_);
  swap(op_sign_, other->op_sign_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KvOpPair::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientOperationReq::InitAsDefaultInstance() {
}
class ClientOperationReq::_Internal {
 public:
};

ClientOperationReq::ClientOperationReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:eraftkv.ClientOperationReq)
}
ClientOperationReq::ClientOperationReq(const ClientOperationReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      kvs_(from.kvs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_id().empty()) {
    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  ::memcpy(&op_timestamp_, &from.op_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&command_id_) -
    reinterpret_cast<char*>(&op_timestamp_)) + sizeof(command_id_));
  // @@protoc_insertion_point(copy_constructor:eraftkv.ClientOperationReq)
}

void ClientOperationReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientOperationReq_eraftkv_2eproto.base);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&op_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&command_id_) -
      reinterpret_cast<char*>(&op_timestamp_)) + sizeof(command_id_));
}

ClientOperationReq::~ClientOperationReq() {
  // @@protoc_insertion_point(destructor:eraftkv.ClientOperationReq)
  SharedDtor();
}

void ClientOperationReq::SharedDtor() {
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClientOperationReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientOperationReq& ClientOperationReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientOperationReq_eraftkv_2eproto.base);
  return *internal_default_instance();
}


void ClientOperationReq::Clear() {
// @@protoc_insertion_point(message_clear_start:eraftkv.ClientOperationReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kvs_.Clear();
  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&op_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&command_id_) -
      reinterpret_cast<char*>(&op_timestamp_)) + sizeof(command_id_));
  _internal_metadata_.Clear();
}

const char* ClientOperationReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 op_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          op_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string client_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "eraftkv.ClientOperationReq.client_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 command_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          command_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .eraftkv.KvOpPair kvs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_kvs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientOperationReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:eraftkv.ClientOperationReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 op_timestamp = 1;
  if (this->op_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_op_timestamp(), target);
  }

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "eraftkv.ClientOperationReq.client_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_client_id(), target);
  }

  // int64 command_id = 3;
  if (this->command_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_command_id(), target);
  }

  // repeated .eraftkv.KvOpPair kvs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_kvs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_kvs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eraftkv.ClientOperationReq)
  return target;
}

size_t ClientOperationReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eraftkv.ClientOperationReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .eraftkv.KvOpPair kvs = 4;
  total_size += 1UL * this->_internal_kvs_size();
  for (const auto& msg : this->kvs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  // uint64 op_timestamp = 1;
  if (this->op_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_op_timestamp());
  }

  // int64 command_id = 3;
  if (this->command_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_command_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientOperationReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eraftkv.ClientOperationReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientOperationReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientOperationReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eraftkv.ClientOperationReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eraftkv.ClientOperationReq)
    MergeFrom(*source);
  }
}

void ClientOperationReq::MergeFrom(const ClientOperationReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eraftkv.ClientOperationReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  kvs_.MergeFrom(from.kvs_);
  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.op_timestamp() != 0) {
    _internal_set_op_timestamp(from._internal_op_timestamp());
  }
  if (from.command_id() != 0) {
    _internal_set_command_id(from._internal_command_id());
  }
}

void ClientOperationReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eraftkv.ClientOperationReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientOperationReq::CopyFrom(const ClientOperationReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eraftkv.ClientOperationReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientOperationReq::IsInitialized() const {
  return true;
}

void ClientOperationReq::InternalSwap(ClientOperationReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  kvs_.InternalSwap(&other->kvs_);
  client_id_.Swap(&other->client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(op_timestamp_, other->op_timestamp_);
  swap(command_id_, other->command_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientOperationReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientOperationResp::InitAsDefaultInstance() {
}
class ClientOperationResp::_Internal {
 public:
};

ClientOperationResp::ClientOperationResp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:eraftkv.ClientOperationResp)
}
ClientOperationResp::ClientOperationResp(const ClientOperationResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ops_(from.ops_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&leader_addr_, &from.leader_addr_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&leader_addr_)) + sizeof(error_code_));
  // @@protoc_insertion_point(copy_constructor:eraftkv.ClientOperationResp)
}

void ClientOperationResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientOperationResp_eraftkv_2eproto.base);
  ::memset(&leader_addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&leader_addr_)) + sizeof(error_code_));
}

ClientOperationResp::~ClientOperationResp() {
  // @@protoc_insertion_point(destructor:eraftkv.ClientOperationResp)
  SharedDtor();
}

void ClientOperationResp::SharedDtor() {
}

void ClientOperationResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientOperationResp& ClientOperationResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientOperationResp_eraftkv_2eproto.base);
  return *internal_default_instance();
}


void ClientOperationResp::Clear() {
// @@protoc_insertion_point(message_clear_start:eraftkv.ClientOperationResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ops_.Clear();
  ::memset(&leader_addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&leader_addr_)) + sizeof(error_code_));
  _internal_metadata_.Clear();
}

const char* ClientOperationResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .eraftkv.KvOpPair ops = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .eraftkv.ErrorCode error_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_error_code(static_cast<::eraftkv::ErrorCode>(val));
        } else goto handle_unusual;
        continue;
      // int64 leader_addr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          leader_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientOperationResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:eraftkv.ClientOperationResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .eraftkv.KvOpPair ops = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ops_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_ops(i), target, stream);
  }

  // .eraftkv.ErrorCode error_code = 2;
  if (this->error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_error_code(), target);
  }

  // int64 leader_addr = 3;
  if (this->leader_addr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_leader_addr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eraftkv.ClientOperationResp)
  return target;
}

size_t ClientOperationResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eraftkv.ClientOperationResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .eraftkv.KvOpPair ops = 1;
  total_size += 1UL * this->_internal_ops_size();
  for (const auto& msg : this->ops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 leader_addr = 3;
  if (this->leader_addr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_leader_addr());
  }

  // .eraftkv.ErrorCode error_code = 2;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientOperationResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eraftkv.ClientOperationResp)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientOperationResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientOperationResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eraftkv.ClientOperationResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eraftkv.ClientOperationResp)
    MergeFrom(*source);
  }
}

void ClientOperationResp::MergeFrom(const ClientOperationResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eraftkv.ClientOperationResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ops_.MergeFrom(from.ops_);
  if (from.leader_addr() != 0) {
    _internal_set_leader_addr(from._internal_leader_addr());
  }
  if (from.error_code() != 0) {
    _internal_set_error_code(from._internal_error_code());
  }
}

void ClientOperationResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eraftkv.ClientOperationResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientOperationResp::CopyFrom(const ClientOperationResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eraftkv.ClientOperationResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientOperationResp::IsInitialized() const {
  return true;
}

void ClientOperationResp::InternalSwap(ClientOperationResp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ops_.InternalSwap(&other->ops_);
  swap(leader_addr_, other->leader_addr_);
  swap(error_code_, other->error_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientOperationResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SSTFileId::InitAsDefaultInstance() {
}
class SSTFileId::_Internal {
 public:
};

SSTFileId::SSTFileId()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:eraftkv.SSTFileId)
}
SSTFileId::SSTFileId(const SSTFileId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:eraftkv.SSTFileId)
}

void SSTFileId::SharedCtor() {
  id_ = 0;
}

SSTFileId::~SSTFileId() {
  // @@protoc_insertion_point(destructor:eraftkv.SSTFileId)
  SharedDtor();
}

void SSTFileId::SharedDtor() {
}

void SSTFileId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSTFileId& SSTFileId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSTFileId_eraftkv_2eproto.base);
  return *internal_default_instance();
}


void SSTFileId::Clear() {
// @@protoc_insertion_point(message_clear_start:eraftkv.SSTFileId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _internal_metadata_.Clear();
}

const char* SSTFileId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSTFileId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:eraftkv.SSTFileId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eraftkv.SSTFileId)
  return target;
}

size_t SSTFileId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eraftkv.SSTFileId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSTFileId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eraftkv.SSTFileId)
  GOOGLE_DCHECK_NE(&from, this);
  const SSTFileId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSTFileId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eraftkv.SSTFileId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eraftkv.SSTFileId)
    MergeFrom(*source);
  }
}

void SSTFileId::MergeFrom(const SSTFileId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eraftkv.SSTFileId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void SSTFileId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eraftkv.SSTFileId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSTFileId::CopyFrom(const SSTFileId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eraftkv.SSTFileId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSTFileId::IsInitialized() const {
  return true;
}

void SSTFileId::InternalSwap(SSTFileId* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSTFileId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SSTFileContent::InitAsDefaultInstance() {
}
class SSTFileContent::_Internal {
 public:
};

SSTFileContent::SSTFileContent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:eraftkv.SSTFileContent)
}
SSTFileContent::SSTFileContent(const SSTFileContent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:eraftkv.SSTFileContent)
}

void SSTFileContent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SSTFileContent_eraftkv_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

SSTFileContent::~SSTFileContent() {
  // @@protoc_insertion_point(destructor:eraftkv.SSTFileContent)
  SharedDtor();
}

void SSTFileContent::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SSTFileContent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSTFileContent& SSTFileContent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSTFileContent_eraftkv_2eproto.base);
  return *internal_default_instance();
}


void SSTFileContent::Clear() {
// @@protoc_insertion_point(message_clear_start:eraftkv.SSTFileContent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  _internal_metadata_.Clear();
}

const char* SSTFileContent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "eraftkv.SSTFileContent.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSTFileContent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:eraftkv.SSTFileContent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "eraftkv.SSTFileContent.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // bytes content = 3;
  if (this->content().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eraftkv.SSTFileContent)
  return target;
}

size_t SSTFileContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eraftkv.SSTFileContent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bytes content = 3;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSTFileContent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eraftkv.SSTFileContent)
  GOOGLE_DCHECK_NE(&from, this);
  const SSTFileContent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSTFileContent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eraftkv.SSTFileContent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eraftkv.SSTFileContent)
    MergeFrom(*source);
  }
}

void SSTFileContent::MergeFrom(const SSTFileContent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eraftkv.SSTFileContent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void SSTFileContent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eraftkv.SSTFileContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSTFileContent::CopyFrom(const SSTFileContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eraftkv.SSTFileContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSTFileContent::IsInitialized() const {
  return true;
}

void SSTFileContent::InternalSwap(SSTFileContent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSTFileContent::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace eraftkv
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::eraftkv::RequestVoteReq* Arena::CreateMaybeMessage< ::eraftkv::RequestVoteReq >(Arena* arena) {
  return Arena::CreateInternal< ::eraftkv::RequestVoteReq >(arena);
}
template<> PROTOBUF_NOINLINE ::eraftkv::RequestVoteResp* Arena::CreateMaybeMessage< ::eraftkv::RequestVoteResp >(Arena* arena) {
  return Arena::CreateInternal< ::eraftkv::RequestVoteResp >(arena);
}
template<> PROTOBUF_NOINLINE ::eraftkv::Entry* Arena::CreateMaybeMessage< ::eraftkv::Entry >(Arena* arena) {
  return Arena::CreateInternal< ::eraftkv::Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::eraftkv::AppendEntriesReq* Arena::CreateMaybeMessage< ::eraftkv::AppendEntriesReq >(Arena* arena) {
  return Arena::CreateInternal< ::eraftkv::AppendEntriesReq >(arena);
}
template<> PROTOBUF_NOINLINE ::eraftkv::AppendEntriesResp* Arena::CreateMaybeMessage< ::eraftkv::AppendEntriesResp >(Arena* arena) {
  return Arena::CreateInternal< ::eraftkv::AppendEntriesResp >(arena);
}
template<> PROTOBUF_NOINLINE ::eraftkv::SnapshotReq* Arena::CreateMaybeMessage< ::eraftkv::SnapshotReq >(Arena* arena) {
  return Arena::CreateInternal< ::eraftkv::SnapshotReq >(arena);
}
template<> PROTOBUF_NOINLINE ::eraftkv::SnapshotResp* Arena::CreateMaybeMessage< ::eraftkv::SnapshotResp >(Arena* arena) {
  return Arena::CreateInternal< ::eraftkv::SnapshotResp >(arena);
}
template<> PROTOBUF_NOINLINE ::eraftkv::Slot* Arena::CreateMaybeMessage< ::eraftkv::Slot >(Arena* arena) {
  return Arena::CreateInternal< ::eraftkv::Slot >(arena);
}
template<> PROTOBUF_NOINLINE ::eraftkv::Server* Arena::CreateMaybeMessage< ::eraftkv::Server >(Arena* arena) {
  return Arena::CreateInternal< ::eraftkv::Server >(arena);
}
template<> PROTOBUF_NOINLINE ::eraftkv::ShardGroup* Arena::CreateMaybeMessage< ::eraftkv::ShardGroup >(Arena* arena) {
  return Arena::CreateInternal< ::eraftkv::ShardGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::eraftkv::ClusterConfigChangeReq* Arena::CreateMaybeMessage< ::eraftkv::ClusterConfigChangeReq >(Arena* arena) {
  return Arena::CreateInternal< ::eraftkv::ClusterConfigChangeReq >(arena);
}
template<> PROTOBUF_NOINLINE ::eraftkv::ClusterConfigChangeResp* Arena::CreateMaybeMessage< ::eraftkv::ClusterConfigChangeResp >(Arena* arena) {
  return Arena::CreateInternal< ::eraftkv::ClusterConfigChangeResp >(arena);
}
template<> PROTOBUF_NOINLINE ::eraftkv::KvOpPair* Arena::CreateMaybeMessage< ::eraftkv::KvOpPair >(Arena* arena) {
  return Arena::CreateInternal< ::eraftkv::KvOpPair >(arena);
}
template<> PROTOBUF_NOINLINE ::eraftkv::ClientOperationReq* Arena::CreateMaybeMessage< ::eraftkv::ClientOperationReq >(Arena* arena) {
  return Arena::CreateInternal< ::eraftkv::ClientOperationReq >(arena);
}
template<> PROTOBUF_NOINLINE ::eraftkv::ClientOperationResp* Arena::CreateMaybeMessage< ::eraftkv::ClientOperationResp >(Arena* arena) {
  return Arena::CreateInternal< ::eraftkv::ClientOperationResp >(arena);
}
template<> PROTOBUF_NOINLINE ::eraftkv::SSTFileId* Arena::CreateMaybeMessage< ::eraftkv::SSTFileId >(Arena* arena) {
  return Arena::CreateInternal< ::eraftkv::SSTFileId >(arena);
}
template<> PROTOBUF_NOINLINE ::eraftkv::SSTFileContent* Arena::CreateMaybeMessage< ::eraftkv::SSTFileContent >(Arena* arena) {
  return Arena::CreateInternal< ::eraftkv::SSTFileContent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
